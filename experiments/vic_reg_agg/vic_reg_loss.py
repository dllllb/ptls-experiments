# -*- coding: utf-8 -*-
"""vic_reg_loss.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m1m985Kfds1oZPgLt_QJGbzhraOfh5X7
"""

class VICRegLoss(nn.Module):

    def __init__(self, ):
        super(VICRegLoss, self).__init__()

        self._agg_encoder = AggFeatureSeqEncoder(
            embeddings={
                "mcc": {"in": 100},
                "channel_type": {"in": 4},
                "currency": {"in": 4},
                "trx_category": {"in": 10}
            },

            numeric_values={
                'amount': 'identity',
            },

            was_logified=True,
            log_scale_factor=1
        )
        self.instanceNorm = nn.InstanceNorm1d(362, affine=True)

    def forward(self, embeddings, aggs):
        aggs = self._agg_encoder(aggs)
        aggs = self.instanceNorm(aggs.view(362, len(aggs)))

        cov_aggs_embs = (aggs @ embeddings) / 640
        cov_loss = cov_aggs_embs.pow_(2).sum()

        std_embeddings = torch.sqrt(embeddings.var(dim=0) + 0.0001)
        std_loss = torch.mean(F.relu(1 - std_embeddings))

        return [cov_loss, std_loss]